
# Para iniciar un nuevo proyecto.

# pip install virtualenv => Instalar un entorno virtual con pip

# virtualenv venv => para intallar

# source venv/bin/activate 
=> Para activar el entorno 

# f1 + select interpreter + recomendado => para no tener que estar activando el entorno a toda hora.

# django-admin --version => ver version

pip install django

# shell - python => podemos escribir en python desde la terminal

# shell- impor django
# shell- django.get_version()
# shell- exit

##############################################################

## CREANDO PROYECTO ##

# django-admin startproject mysite .

# python manage.py runserver => activar servidor
# python manage.py runserver 3000 => activar servidor y escoger puerto 

##################

## Carpetas de django ##

# Un proyecto funciona como el nucleo central donde vamos a contener nuestras 'apps' estas apps pueden ser el login, carrito, autenticación, store etc... Esto lo podemos crear con un comando para que cree estas carpetas con archivos ya configurados y luego solo seria unir estas apps por medio de la carpeta nucleo 'mysite' en el archivo manage.py

# python manage.py startapp login => crea la carpeta login con sus configuraciones.

############################################################################################################

## Organizamos las urls por app y no por proyecto esto es para tener el sistema más ordenado.

## Database models ##

# python manage.py makemigrations => para realizar una migración a la base de datos.

# python manage.py migrate => para ejecutar la miigración y crear las tablas en db.

##### uniendo la app a la configuración de mysite #####

# Para crear tablas adicionales tenemos que crear modelos, los modelos son clases en python que se va a transformar en codigo SQL.

Estos scripts sirve en cualquier base de datos.
para crearlo vamos al archivo models.py de la carpeta myapp.

# creamos una clase para añadir table en db.

## Para unir el proyecto principal 'mysite' con 'myapp' => vamos al archivo 'setting.py' en 'mysite' y agregamos "myapp" en la sección de de INSTALL_APPS = []

## python manage.py makemigrations myapp => para crear la migración o modelo 'Project' esto creara un archivo '0001_initial.py' Esto creara la tabla en db.

## python manage.py migrate => aplicar o ejecutar migración.

### Archivo manage.py => Vamos a la sección 'DATABASE' para agregar una conexion a cualquier base de datos.

## Agregando datos a nuestras tablas ##

# python manage.py shell => para importar los modelos y así interactuar con las tablas.

# from myapp.models import Project, Task 

# p = Project(name="aplicación movil") => esto es para guardar en la variable 'p' el objeto creado en la clase Task

# p.save() => para guardar en base de datos.

# Project.objects.all() => para saber cuantos objetos tenemos en nuestra db.

# Project.objects.get(id=1) => para traer un objeto en especifico.

########## Ejecutar Tareas #####

# from myapp.models import Project, Task

# Project.objects.get(id=1)

### Añadir una  tarea a la tabla Task.

# p.task_set.all() => Para consultar las tareas que haya en la tabla task.

### Crear un dato nuevo en la tabla Task.

# p.task_set.create(title="Descargar nuevo ID")

# p.task_set.get(id=1) => mandar a llmar un solo elemento de la db.

###### Para que me devuelva un none, vacio... para que no cause un error. Esto se usa para hacer busquedas "filter" ######

Project.objects.filter(name__startswith="aplicación") => para filtrar por los strinf que comiencen con la palabra "a`licación".

p = Project.objects => Para hacer la busqueda más corta guardar en una variable.

p.filter(name__startswith="aplicación")

### error 404 ###
-Si no se encuentra lo esperado se muestra error 404 con el fin de que no se caiga el servidor y siga app web funcionando.

-importamos
# from django.shortcuts import get_object_or_404


##################################

## Django shell ##

## Params ##

## Params and Models db ##

####### Panel de administración #######

# python manage.py createsuperuser

## vamos a la carpeta admin.py e importamos =>
from .models import Project, Task

##### Templates pass data #####

# Bucle for {%   %}

#### Template inherente ######

### url name and redirect ###




